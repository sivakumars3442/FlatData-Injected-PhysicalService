@page "/"
@using Syncfusion.Blazor.FileManager
@using FileManager_FlatData.Data
@using Microsoft.AspNetCore.Mvc
@inject PhysicalFileProvider PhysicalFileProvider
<SfFileManager TValue="FileManagerDirectoryContent">
    <FileManagerUploadSettings DirectoryUpload=false></FileManagerUploadSettings>
    <FileManagerEvents TValue="FileManagerDirectoryContent" OnSend="OnSend" OnRead="OnRead" ItemsDeleting="OnDelete"  ItemsDeleted="Deleted" OnSuccess="OnSuccess" FolderCreating="OnModelCreate" FolderCreated="ModelCreated" Searching="OnSearch" Searched="Searched" ItemRenaming="OnRename" ItemRenamed="Renamed" ItemsCopying="OnCopy" ItemsCopied="Copied" ItemsMoving="OnMove" ItemsMoved="Moved" ItemsUploading="OnUpload" ItemsUploaded="UploadSuccess" BeforeImageLoad="BeforeImageLoad" BeforeDownload="BeforeDownload"></FileManagerEvents>
</SfFileManager>
@code{
    public async Task OnRead(ReadEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await PhysicalFileProvider.GetFiles(args.Path, false, args.Files.ToArray());
    }

    public async Task OnDelete(ItemsDeletingEventArgs<FileManagerDirectoryContent> args)
    {
        string[] names = args.Files.Select(x => x.Name).ToArray();
        args.Response = await PhysicalFileProvider.Delete(args.Path, names, args.Files.ToArray());
    }

    public void Deleted(ItemsDeletedEventArgs<FileManagerDirectoryContent> args)
    {

    }

    public async Task OnModelCreate(FolderCreatingEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await PhysicalFileProvider.Create(args.Path, args.CreatedFolderName, args.Files.ToArray());
    }

    public void ModelCreated(FolderCreatedEventArgs<FileManagerDirectoryContent> args)
    {

    }

    public async Task OnSearch(SearchingEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await PhysicalFileProvider.Search(args.Path, args.SearchText, false, false, args.Files.ToArray());
    }

    public void Searched(SearchedEventArgs<FileManagerDirectoryContent> args)
    {

    }

    public async Task OnRename(ItemRenamingEventArgs<FileManagerDirectoryContent> args)
    {
        args.Response = await PhysicalFileProvider.Rename(args.Path, args.Files.First().Name, args.NewName, false, args.ShowFileExtension, args.Files.ToArray());
    }

    public void Renamed(ItemRenamedEventArgs<FileManagerDirectoryContent> args)
    {

    }

    public async Task OnCopy(ItemsCopyingEventArgs<FileManagerDirectoryContent> args)
    {
        string[] names = args.Files.Select(x => x.Name).ToArray();
        args.Response = await PhysicalFileProvider.Copy(args.Path, args.TargetPath, names, args.RenameFiles, args.TargetData, args.Files.ToArray());
    }

    public void Copied(ItemsCopiedEventArgs<FileManagerDirectoryContent> args)
    {

    }

    public async Task OnMove(ItemsMovingEventArgs<FileManagerDirectoryContent> args)
    {
        string[] names = args.Files.Select(x => x.Name).ToArray();
        args.Response = await PhysicalFileProvider.Move(args.Path, args.TargetPath, names, args.RenameFiles, args.TargetData, args.Files.ToArray());
    }

    public void Moved(ItemsMovedEventArgs<FileManagerDirectoryContent> args)
    {

    }
    void OnSend(BeforeSendEventArgs args)
    {

    }
    public void OnUpload(ItemsUploadingEventArgs<FileManagerDirectoryContent> args)
    {
        //PhysicalFileProvider.UploadFlatData(args.Path, args.FilesData, args.Action, args.FileDetails);
    }
    public void OnSuccess(SuccessEventArgs<FileManagerDirectoryContent> args)
    {

    }
    public async Task UploadSuccess(ItemsUploadedEventArgs<FileManagerDirectoryContent> args)
    {
        args.IsSelected = true;
        args.AutoDialogClose = true;
        try
        {
            foreach (var file in args.Files)
            {
                var folders = (file.FileInfo.Name).Split('/');
                    // checking the folder upload
                    if (folders.Length > 1)
                    {
                        for (var i = 0; i < folders.Length - 1; i++)
                        {
                            string newDirectoryPath = Path.Combine(PhysicalFileProvider.basePath + args.Path, folders[i]);
                            if (Path.GetFullPath(newDirectoryPath) != (Path.GetDirectoryName(newDirectoryPath) + Path.DirectorySeparatorChar + folders[i]))
                            {
                                throw new UnauthorizedAccessException("Access denied for Directory-traversal");
                            }
                            if (!Directory.Exists(newDirectoryPath))
                            {
                               await PhysicalFileProvider.Create(args.Path, folders[i]);
                            }
                            args.Path += folders[i] + "/";
                        }
                    }
                var fullName = Path.Combine((PhysicalFileProvider.contentRootPath + args.Path), file.File.Name);
                using (var filestream = new FileStream(fullName, FileMode.Create, FileAccess.Write))
                {
                    await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task BeforeImageLoad(BeforeImageLoadEventArgs<FileManagerDirectoryContent> args)
    {
        var result = await PhysicalFileProvider.GetImage(args.ImagePath, false, args.FileDetails);
        args.FileStream = result.FileStream;
    }

    public void BeforeDownload(BeforeDownloadEventArgs<FileManagerDirectoryContent> args)
    {
        var downloadData = PhysicalFileProvider.Download(args.DownloadData.Path, args.DownloadData.Names, args.DownloadData.DownloadFileDetails.ToArray());
        args.FileStream = downloadData.FileStream;
        args.DownloadFileName = downloadData.FileDownloadName;
    }
}


